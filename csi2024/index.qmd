---
title: "CSI Presentation 2024"
author: "Wassim Kabalan, Fran√ßois Lanusse, Alexandre Boucaud"
footer: "CSI Presentation 2024"
format:
  revealjs:
    theme: [default, css/custom.scss]
    incremental: false   
    transition: slide
    background-transition: slide
    presentation-size: max-scale
    template-partials:
      - css/title-slide.html
output: revealjs

code-block-border-left: "#31BAE9"
title-slide-attributes:
  data-background-image: "assets/lsst_bg.jpg"
  data-background-size: fill
  data-background-opacity: "0.5"

logo1: '![](assets/Logos/AIM.png){fig-align="center"width=10%} ![](assets/Logos/APC.png){fig-align="center" width=10%} ![](assets/Logos/AstroDeep-2.png){fig-align="center" width=10%} ![](assets/Logos/scipol.jpeg){fig-align="center" width=10%}'


---

## Summary of projects {auto-animate=true}

:::{data-id="Projects"}
![Projects](assets/Projects/ALL_Projects.svg){.nostretch fig-align="center" width="70%"}
:::
## Cosmic Microwave Background - Scipol {auto-animate=true}

:::{data-id="Projects"}
![Projects](assets/Projects/Scipol.svg){.nostretch fig-align="center" width="70%"}
:::
## Cosmic Microwave Background 
:::: {.columns}

::: {.column width="50%"}

![](assets/CMB/CMB-Planck.png){.nostretch fig-align="center" width="75%"}

::: {.fragment fragment-index=1}
![](assets/CMB/Equal_symbol.svg){.nostretch fig-align="center" width="10%"}

![](assets/CMB/eb-modes.png){.nostretch fig-align="center" width="45%"}
::: 

:::

::: {.column width="50%"}

- The **Cosmic Microwave Background (CMB)** is the afterglow of the Big Bang, providing a snapshot of the early universe.

::: {.fragment fragment-index=1}
- The CMB is polarized, consisting of **E and B modes**. 
- **E modes** are curl-free, generated by density fluctuations.
- **B modes** could be evidence of primordial gravitational waves, indicating cosmic inflation.
:::

:::

::::


## Cosmic Microwave Background 

:::: {.columns}

::: {.column width="50%"}

![](assets/CMB/CMB-Planck.png){.nostretch fig-align="center" width="35%"}

::: {.fragment fragment-index=1}

![](assets/CMB/Plus_symbol.svg){.nostretch fig-align="center" width="10%"}

![](assets/CMB/dust_planck.png){.nostretch fig-align="center" width="35%"}

:::

::: {.fragment fragment-index=2}

![](assets/CMB/Plus_symbol.svg){.nostretch fig-align="center" width="10%"}

![](assets/CMB/synch-planck.png){.nostretch fig-align="center" width="35%"}

:::

:::

::: {.column width="50%"}

- The **Cosmic Microwave Background (CMB)** signal is obscured by various **foregrounds**, making it challenging to detect the true cosmological information.

::: {.fragment fragment-index=1}
- **Dust**: Emission from galactic dust adds significant noise to the CMB, particularly affecting polarization measurements.
:::

::: {.fragment fragment-index=2}
- **Synchrotron Radiation**: Electrons spiraling in the galaxy's magnetic fields produce synchrotron radiation, another major contaminant.
:::

<br />
<br />
<br />
<br />

::: {.fragment fragment-index=3}

::: {layout-ncol=2 layout-valign="center"}

![](assets/CMB/Equal_symbol.svg){.nostretch fig-align="center" width="60%"}

![](assets/CMB/CMB_Contaminated.png){.nostretch fig-align="center" width="75%"}

:::

:::



:::

::::

## CMB Component Separation

:::: {.columns}

::: {.column width="50%"}

::: {.fragment fragment-index=1}

![](assets/CMB/dust_planck.png){.nostretch fig-align="center" width="45%"}

:::

::: {.fragment fragment-index=2}

![](assets/CMB/synch-planck.png){.nostretch fig-align="center" width="45%"}

:::

:::

::: {.column width="50%"}

::: {.fragment fragment-index=1}

**Modified Blackbody SED of Dust:**

$$
\boxed{s_{\mathrm{d}}(\nu) = A_{\mathrm{d}} \cdot \frac{\nu}{\exp\left(\frac{h\nu}{k \color{red}{T_{\mathrm{d}}}}\right) - 1} \cdot \frac{\exp\left(\frac{h\nu_{0}}{k \color{red}{T_{\mathrm{d}}}}\right) - 1}{\nu_{0}} \cdot \left(\frac{\nu}{\nu_{0}}\right)^{\color{blue}{\beta}}}
$$

:::

::: {.fragment fragment-index=2}

**Power Law of Synchrotron Emission:**

$$
\boxed{s_{\text{synch}}(\nu) = \left(\frac{\nu}{\nu_0}\right)^{\color{green}{\beta_{\text{pl}}}}}
$$

:::

:::

::::

::: {.fragment fragment-index=3}

#### Signal Representation

::: {.columns}

::: {.column width="50%"}

$$
\boxed{\mathbf{d} = \mathbf{A} \mathbf{s} + \mathbf{n}}
$$

:::

::: {.column width="50%"}

$$
\boxed{\mathbf{d} = \color{green}{A_{\text{synch}}} \cdot s_{\text{synch}} + \color{blue}{A_{\mathrm{d}}} \cdot s_{\mathrm{d}} + A_{\text{cmb}} \cdot s_{\text{cmb}} + \mathbf{n}}
$$

:::

:::

:::

::: {.fragment fragment-index=4}

#### Likelihood Function

$$
\boxed{-2 \ln \mathcal{L}_{\text{data}}(\mathbf{s}, \boldsymbol{\beta}) = \text{const} + \sum_{p} \left( \mathbf{d}_p - \mathbf{A}_p \mathbf{s}_p \right)^T \mathbf{N}_p^{-1} \left( \mathbf{d}_p - \mathbf{A}_p \mathbf{s}_p \right)}
$$

:::

::: {.r-stack}

::: {.fragment fragment-index=5 .fade-in-then-out}

#### Minimization for Component Separation

$$
\boxed{\mathbf{s} = \left( \mathbf{A}^T \mathbf{N}^{-1} \mathbf{A} \right)^{-1} \mathbf{A}^T \mathbf{N}^{-1} \mathbf{d}}
$$

:::

::: {.fragment fragment-index=6}

#### Minimization for Component Separation

$$
\boxed{\mathcal{L}(\color{blue}{\beta_d}, \color{red}{T_d}, \color{green}{\beta_{\text{pl}}}) = \left( \mathbf{A}^T \mathbf{N}^{-1} \mathbf{A} \right)^{-1} \mathbf{A}^T \mathbf{N}^{-1} \mathbf{d}}
$$

:::


:::


## Structure of the Matrices in CMB Component Separation

<br />

::: {.fragment fragment-index=1}

**Mixed Component Matrix:**

$$
\mathbf{d} =
\left[ 
\begin{array}{c@{}c@{}c}
 \left[\begin{array}{ccc}
         I_{0,0} & 0       & 0 \\
         0       & Q_{0,0} & 0 \\
         0       & 0       & U_{0,0} \\
  \end{array}\right] 
  & \cdots &  
  \left[\begin{array}{ccc}
         I_{0,p} & 0       & 0 \\
         0       & Q_{0,p} & 0 \\
         0       & 0       & U_{0,p} \\
  \end{array}\right] \\
  \vdots & \ddots & \vdots \\
  \left[\begin{array}{ccc}
         I_{F,0} & 0       & 0 \\
         0       & Q_{F,0} & 0 \\
         0       & 0       & U_{F,0} \\
  \end{array}\right] 
  & \cdots &  
  \left[\begin{array}{ccc}
         I_{F,p} & 0       & 0 \\
         0       & Q_{F,p} & 0 \\
         0       & 0       & U_{F,p} \\
  \end{array}\right] \\
\end{array}
\right]  
$$
:::


::: {.fragment fragment-index=2}

**Mixing Matrix:**

$$
\mathbf{A}(\beta) =
\left[ 
\begin{array}{c@{}c@{}c}
 \left[\begin{array}{ccc}
         I_{0,0,0} & 0          & 0 \\
         0         & Q_{0,0,0}  & 0 \\
         0         & 0          & U_{0,0,0} \\
  \end{array}\right] 
  & \cdots &
  \left[\begin{array}{ccc}
         I_{0,0,c} & 0          & 0 \\
         0         & Q_{0,0,c}  & 0 \\
         0         & 0          & U_{0,0,c} \\
  \end{array}\right] 
  & \cdots &  
  \left[\begin{array}{ccc}
         I_{0,p,c} & 0          & 0 \\
         0         & Q_{0,p,c}  & 0 \\
         0         & 0          & U_{0,p,c} \\
  \end{array}\right] \\
  \vdots & \ddots & \vdots & \ddots & \vdots \\
  \left[\begin{array}{ccc}
         I_{F,0,0} & 0          & 0 \\
         0         & Q_{F,0,0}  & 0 \\
         0         & 0          & U_{F,0,0} \\
  \end{array}\right] 
  & \cdots &
  \left[\begin{array}{ccc}
         I_{F,0,c} & 0          & 0 \\
         0         & Q_{F,0,c}  & 0 \\
         0         & 0          & U_{F,0,c} \\
  \end{array}\right] 
  & \cdots &  
  \left[\begin{array}{ccc}
         I_{F,p,c} & 0          & 0 \\
         0         & Q_{F,p,c}  & 0 \\
         0         & 0          & U_{F,p,c} \\
  \end{array}\right] \\
\end{array}
\right]
$$

:::


## Minimization Process in CMB Component Separation

### Part 1: Using Scipols's  `Furax` Library (Chanial et al. in prep.)

<br />
<br />

```python
blocks = jnp.arange(24).reshape(3, 2, 4)
p = DenseBlockDiagonalOperator(blocks, jax.ShapeDtypeStruct((3, 4), jnp.int32), 'imn,in->im')
op.as_matrix()
Array([[ 0,  1,  2,  3,  0,  0,  0,  0,  0,  0,  0,  0],
       [ 4,  5,  6,  7,  0,  0,  0,  0,  0,  0,  0,  0],
       [ 0,  0,  0,  0,  8,  9, 10, 11,  0,  0,  0,  0],
       [ 0,  0,  0,  0, 12, 13, 14, 15,  0,  0,  0,  0],
       [ 0,  0,  0,  0,  0,  0,  0,  0, 16, 17, 18, 19],
       [ 0,  0,  0,  0,  0,  0,  0,  0, 20, 21, 22, 23]], dtype=int32)

```
<br />
<br />

### Part 2: Using `JAX` ecosystem for Minimization  and Machine Learning Tools

- **Objective**: Apply gradient descent to the `DenseBlockDiagonalOperator` matrix.

- **Approach**:
  - Retrofit the operator into the JAX ecosystem.
  - Leverage JAX's automatic differentiation for efficient gradient computation.


## Summary of projects {auto-animate=true}

:::{data-id="Projects"}
![Projects](assets/Projects/ALL_Projects.svg){.nostretch fig-align="center" width="70%"}
:::

## Weak Lensing - AstroDeep/Aim {auto-animate=true}

:::{data-id="Projects"}

![Projects](assets/Projects/WK.svg){.nostretch fig-align="center" width="70%"}

:::

## Weak Lensing - Statistical Tools {auto-animate=true}

:::: {.columns}

::: {.column width="50%"}

::: {.r-stack}

::: {.fragment fragment-index=1 .fade-out}

![Hubble eXtreme Deep Field](assets/CSI-Hubble.svg){.nostretch fig-align="center" width="55%"}

:::

::: {.fragment fragment-index=1 .fade-in-then-out}

![Hubble eXtreme Deep Field](assets/CSI-Hubble Annotated.svg){.nostretch fig-align="center" width="55%"}

:::

::: {.fragment fragment-index=2}

$$
-2 \underbrace{\log P(g, \boldsymbol{\beta} \mid \mathbf{d})}_{\text{Posterior}} = 
\sum_{\vec{k}} \left[\underbrace{\frac{\left|\mathbf{d} - f(g \mid \boldsymbol{\beta}, z)\right|^2}{N}}_{\text{Likelihood}} + \underbrace{\frac{|g|^2}{\mathcal{P}(\boldsymbol{\beta})}}_{\text{Prior}}\right]_{\vec{k}}
$$

:::

:::

::: {.fragment fragment-index=4}

![Prediction](assets/Symboles/Right-Arrow.svg){.nostretch fig-align="center" width="70%"}

:::

::: {.fragment fragment-index=3}


::: {layout="[[30,-4,30,-4,34], [100]]"}

![Gaussian field](assets/Fields/initial_conditions_1024.png){.nostretch fig-align="center" width="75%"}


![LPT Field](assets/Fields/LPT_density_field_z0_1024.png){.nostretch fig-align="center" width="75%"}


![Galaxies](assets/CSI-Hubble.svg){.nostretch fig-align="center" width="75%"}

:::

::: {.fragment fragment-index=4}

![Inference](assets/Symboles/Left-Arrow.svg){.nostretch fig-align="center" width="70%"}

:::


:::

:::

::: {.column width="50%"}

::: {.r-stack}

::: {.fragment fragment-index=1 .fade-in-then-out}

![](assets/FFI/PowerSpec.svg){.nostretch fig-align="center" width="80%"}

:::

::: {.fragment fragment-index=2}

![](assets/FFI/CSI-FFI.svg){.nostretch fig-align="center" width="80%"}

:::

:::


:::

::::


## Hearchical Bayesian Modeling


:::{.columns}

:::{.column width="50%"}

![Probabilistic Graphical Model](assets/FFI/HBM.png){.nostretch fig-align="center" width="70%"}

:::

:::{.column width="50%"}

‚ûï  &emsp;No longer need to compute the likelihood analytically
<br />
<br />
‚ûñ &emsp;We need to infer the joint posterior $p(\beta, g | z)$ before marginalization to get $p(\beta | g) = \int p(\beta, z | g) \, dz$

:::

:::

:::{.fragment fragment-index=1}

:::{.solutionbox}


::::{.solutionbox-header}
Possible solutions
::::

::::{.solutionbox-body}
- **Hamiltonian Monte Carlo**
- **Variational Inference**
- **Dimensionality reduction using Fisher Information Matrix**

*All require a differentiable fast forward model*

::::

:::

:::

## Fast Particle-mesh simulations

<br />
<br />


:::: {.columns}

::: {.column width="50%"}

#### Numerical scheme

::: {.fragment fragment-index=1}

‚û¢  &emsp;Interpolate particles on a grid to estimate mass density

:::

::: {.fragment fragment-index=2}

‚û¢  &emsp;Estimate gravitational force on grid points by FFT

:::

::: {.fragment fragment-index=3}

‚û¢  &emsp;Interpolate forces back on particles

:::

::: {.fragment fragment-index=4}

‚û¢  &emsp;Update particle velocity and positions, and iterate 

:::

::: 

::: {.column width="50%"}

:::{r-stack}


::: {.fragment fragment-index=1 .fade-in-then-out}

![](assets/FastPM_Init.gif){.absolute top=50 left=400 width="800"}

:::


::: {.fragment fragment-index=2 .fade-in-then-out}

![](assets/FastPM_LPT.gif){.absolute top=50 left=400 width="800"}


[$\begin{array}{c}{{\nabla^{2}\phi=-4\pi G\rho}}\\\\ {{f(\vec{k})=i\vec{k}k^{-2}\rho(\vec{k})}}\end{array}$]{.absolute top=500 right=160}

::: 

::: {.fragment fragment-index=3}

![](assets/FastPM_ODE.gif){.absolute top=50 left=400 width="800"}



:::

:::

::: 

:::: 

::: {.fragment fragment-index=5 }

<br />
<br />
<br />
<br />
<br />
<br />


:::{.solutionbox}

::::{.solutionbox-body}

- Fast and simple, at the cost of approximating short range interactions. 
- It is essentially a series of FFTs and interpolations
- It is differentiable and can run on GPUs

::::

:::

:::

