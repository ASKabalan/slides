---
title: "Differentiable and distributed Particle-Mesh n-body simulations"

author: "Wassim Kabalan"
format:
  revealjs:
    theme: css/custom.scss
    incremental: false   
    transition: slide
    background-transition: slide
title-slide-attributes:
  data-background-image: "assets/lsst_bg.jpg"
  data-background-size: fill
  data-background-opacity: "0.5"
---


## Traditional cosmological inference

<br />

### Bayesian inference in cosmology

- We need to infer the cosmological parameters $\theta$ that generated an observartion $x$

<font size="4">$$p(\theta | x ) \propto \underbrace{p(x | \theta)}_{\mathrm{likelihood}} \ \underbrace{p(\theta)}_{\mathrm{prior}}$$</font>


:::: {.columns}

::: {.column width="40%"}

::: {.fragment fragment-index=1 .fade-in-then-out }

![](assets/hsc-corr-function.png){.absolute top=180 left=25 width="300"}

:::

::: {.fragment fragment-index=2}

![](assets/hsc_constraints.png){.absolute top=200 left=25 width="350"}

:::

:::

::: {.column width="60%"}

::: {.fragment fragment-index=1}
<br />
 ➢  &emsp;Compute **summary statistics** based on the 2-point correlation function of the shear field
:::

::: {.fragment fragment-index=2}
<br />
 ➢  &emsp;Run an **MCMC** chain to recover the posterior distribution of the cosmological parameters, using an **analytical likelihood**
:::

:::

::::

<br />

::: {.fragment fragment-index=3}

:::{.solutionbox}

::::{.solutionbox-header}
Limitations
::::

::::{.solutionbox-body}
- Simple summary statistics assume Gaussianity
- The need to compute an analytical likelihood
::::

:::

:::

---

### Beyond 2 point statistics : Full field inference

<br />


![](assets/simu.png){.nostretch fig-align="center" width="600px"}


::: {.fragment}

➕  &emsp;No longer need to compute the likelihood analytically
<br />
<br />
➖ &emsp;We need to infer the joint posterior $p(\theta, z | x)$ before marginalization to get $p(\theta | x) = \int p(\theta, z | x) \, dz$

::: 

::: {.fragment}

:::{.solutionbox}


::::{.solutionbox-header}
Possible solutions
::::

::::{.solutionbox-body}
- **Hamiltonian Monte Carlo**
- **Variational Inference**
- **Dimensionality reduction using Fisher Information Matrix**

*All require a differentiable fast forward model*

::::

:::

:::

::: {.fragment}

➢  &emsp; We need a fast, differentiable and precise cosmological simulations

:::
---

### Fast Particle-mesh simulations

<br />
<br />

:::: {.columns}

::: {.column width="50%"}

#### Numerical scheme

::: {.fragment fragment-index=1}

➢  &emsp;Interpolate particles on a grid to estimate mass density

:::

::: {.fragment fragment-index=2}

➢  &emsp;Estimate gravitational force on grid points by FFT

:::

::: {.fragment fragment-index=3}

➢  &emsp;Interpolate forces back on particles

:::

::: {.fragment fragment-index=4}

➢  &emsp;Update particle velocity and positions, and iterate 

:::

::: 

::: {.column width="50%"}

::: {style="text-align: center;"}


::: {.fragment fragment-index=1 .fade-in-then-out}

![](assets/particle_positions_0.png){.absolute top=25 right=75 width=300px height=300px}
[Cloud in cell interpolation]{.absolute top=320 right=110}
![](assets/cic.png){.absolute top=375 right=175 width=100px}


:::


::: {.fragment fragment-index=2 .fade-in-then-out}

![](assets/particle_density.png){.absolute top=25 right=75 width=300px height=300px}


[$\begin{array}{c}{{\nabla^{2}\phi=-4\pi G\rho}}\\\\ {{f(\vec{k})=i\vec{k}k^{-2}\rho(\vec{k})}}\end{array}$]{.absolute top=350 right=135}

::: 

::: {.fragment fragment-index=3 .fade-in-then-out}

![](assets/particle_positions_0.png){.absolute top=25 right=75 width=300px height=300px}

[$\begin{array}{c}{{\nabla^{2}\phi=-4\pi G\rho}}\\\\ {{f(\vec{k})=i\vec{k}k^{-2}\rho(\vec{k})}}\end{array}$]{.absolute top=350 right=135}


:::
::: {.fragment fragment-index=4}

![](assets/particle_positions_1.png){.absolute top=25 right=75 width=300px height=300px}

:::

:::


::: 

:::: 

::: {.fragment fragment-index=5 }

<br />
<br />
<br />


:::{.solutionbox}

::::{.solutionbox-body}

- Fast and simple, at the cost of approximating short range interactions. 
- It is differentiable and can run on GPUs
- It is essentially a series of FFTs and interpolations

::::

:::

:::

---

### JAX : Automatic differentiation and Hardware acceleration

example of numpy code and grad

---

### JaxPM : A differentiable Particle-Mesh simulation

example of JAXPM code

---

# Is everything solved?

---

### Where does LSST fit into this WIP

Rubin observatory will provide 18,000 square degrees, observed once every few days (few TBs of data per night)

say that we need to make a cube of big part of the volume of the survey.

High end GPUs have a reached 80 GBs A100 next generation H100

---

### Distributed Particle-Mesh simulations

only operation that requires communication is the FFT

#### Jaxdecomp

we can also run multiple devices in a single controlle set up

80 w=x 80

Differentiable multi host distributed n body simulation that runs on GPUs

Related work

FastPM
Poqueres nbody 64^3
pmwd 512^3

---

### JAXPM ewample

built on top of JAXDECOMP

example code of JAXPM

Three steps

Generate the linear field

then LPT simulation 

then the final nbody simulation (use any differential equation solver like diffrax)

Finally we put the final grid back to the particles


---

### Benchmark  WIP



### Animation WIP

Unique solutions : no, two particles crossing each other yoy can't tell which one is which

