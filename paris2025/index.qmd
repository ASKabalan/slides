---
title: '<span style="color:#ffffff; font-size: largest;">JAXPM: A JAX-Based Framework for Scalable and Differentiable Particle Mesh Simulations</span>'

author: 
  - name: "<span style='color:#ffffff; font-size: larger;'>Wassim Kabalan</span>"
footer: "Bayesian Deep Learning Workshop , 2025"
format:
  revealjs:
    theme: [default, css/custom.scss]
    incremental: false   
    transition: slide
    background-transition: slide
    presentation-size: max-scale
    highlight-style: github
    slide-number: true
    template-partials:
      - css/title-slide.html
output: revealjs

title-slide-attributes:
  data-background-image: "assets/titles/bayes_title_1.png"
  data-background-size: fill
  data-background-opacity: "0.8"


logo1 : '
<div style="display: flex; justify-content: space-around; align-items: center; layout-valign="middle">
  <img src="assets/Logos/AstroDeep-2.png" style="width: 35%;"/>
  <img src="assets/Logos/APC.png" style="width: 20%;"/>
  <img src="assets/Logos/scipol.png" style="width: 35%;"/>
</div>
'
---

## Goals for This Presentation 

<br/>
<br/>
<br/>


:::{.solutionbox}

::::{.solutionbox-body style="font-size: 22px; border-radius: 10px; border: 2px solid #3b0a68;"}



- <span style="color:#1a237e; font-size: 26px;">**Understand Field-Level Inference in Cosmology**</span>
<br/>
<br/>
- <span style="color:#1a237e; font-size: 26px;">**Deep Dive into Particle Mesh Simulation**</span>
<br/>
<br/>
- <span style="color:#1a237e; font-size: 26px;">**Weak Lensing and Lightcone Modeling**</span>
<br/>
<br/>
- <span style="color:#1a237e; font-size: 26px;">**Sampling with MCMC**</span>
<br/>
<br/>
- <span style="color:#1a237e; font-size: 26px;">**Explore Distributed, Differentiable N-body Simulations**</span>
<br/>
<br/>
- <span style="color:#1a237e; font-size: 26px;">**Connect Distributed Simulation and Inference**</span>


::::

:::



## Simulation Based Inference in Cosmology {style="font-size: 20px;"}

:::: {.columns}

:::: {.column width="60%"}


<br/>
<br/>


::::: {.r-stack}

:::::: {.fragment fragment-index=1 .fade-in-then-out}
![](assets/FFI/implicit_inference.svg){fig-align="center" width="100%"}
::::::

:::::: {.fragment fragment-index=2 .fade-in}
:::::: {.fragment fragment-index=4 .fade-out}
![](assets/bayes/FFI_full.svg){fig-align="center" width="100%"}
::::::
::::::

:::::: {.fragment fragment-index=4 .fade-in}
![](assets/FFI/FFI_nbody_focus.svg){fig-align="center" width="100%"}
::::::

:::::

::::

:::: {.column width="40%"}

:::::: {.fragment fragment-index=1 .fade-in}

### Implicit (Likelihood-Free) Inference

- Simulator is a **blackbox**  
- No tractable likelihood  
- Only sample from the joint distribution
- Example : **Simulation-based inference (SBI)**

::::::

<br/>
<br/>

:::::: {.fragment fragment-index=2 .fade-in}

### Explicit (Full-Field) Inference

- **Full-field forward model** is differentiable and structured  
- Likelihood defined in pixel space  
- Jointly infer cosmology + latent fields  
- Captures **all available information**
- Example : **Hierarchical Bayesian Modeling (HBM)**
::::::

::::

:::

:::::: {.fragment fragment-index=3 .fade-in}

:::{.solutionbox}

::: {.solutionbox-header style="font-size: 20px;"}
**Takeaway**
:::

:::: {.solutionbox-body style="font-size: 18px;"}
To unlock the full information in cosmological data,  
we must move from summary-based inference → to structured, gradient-based field-level inference.
::::

:::

::::::


---

## Particle Mesh Simulations {style="font-size: 20px;"}

::: {.columns}

:::: {.column width="45%"}


::::: {.fragment fragment-index=1 .fade-in}
![](assets/latest/PM_forces.svg){fig-align="center" width="100%"}
:::::

::::: {.fragment fragment-index=2.fade-in}
![](assets/latest/PM_interpolate.svg){fig-align="center" width="100%"}
:::::


::::

:::: {.column width="55%"}

::::: {.fragment fragment-index=1 .fade-in}

add PMWD JAXPM BORG

###  Compute Forces via PM method

- **Start with particles** $\mathbf{x}_i, \mathbf{p}_i$  
- Interpolate to mesh: $\rho(\mathbf{x})$  
- Solve Poisson’s Equation:
  $$
  \nabla^2 \phi = -4\pi G \rho
  $$
- In Fourier space:
  $$
  \mathbf{f}(\mathbf{k}) = i\mathbf{k}k^{-2}\rho(\mathbf{k})
  $$

:::::

<br/>

::::: {.fragment fragment-index=2 .fade-in}

###  Time Evolution via ODE

- PM uses **Kick-Drift-Kick** (symplectic) scheme:
  - Drift: $\mathbf{x} \leftarrow \mathbf{x} + \Delta a \cdot \mathbf{v}$
  - Kick:  $\mathbf{v} \leftarrow \mathbf{v} + \Delta a \cdot \nabla \phi$
- Treated as a **differentiable ODE system** in JAXPM

:::::



::::

:::

::::: {.fragment fragment-index=3 .fade-in}

:::{.solutionbox}

:::: {.solutionbox-body style="font-size: 18px;"}
 - Fast and scalable approximation to gravity.
 - A cycle of FFTs and interpolations.
 - Sacrifices small-scale accuracy for speed and differentiability.
::::

:::

:::::

# Modeling Weak Lensing with Lightcone Projections


::: {.r-stack}

::::: {.fragment fragment-index=1 .fade-in-then-out}
![](assets/bayes/FFI_full.svg){fig-align="center" width="100%"}
:::::
::::: {.fragment fragment-index=2 .fade-in}
![](assets/FFI/FFI_wl_focus.svg){fig-align="center" width="100%"}
:::::

:::

---

## Lightcone Model: From 3D Structure to Lensing Observables {style="font-size: 19px;"}


::: {.columns}
:::: {.column width="60%"}

::::: {.r-stack}

:::::: {.fragment fragment-index=1 .fade-in-then-out}
![](assets/latest/how_converge.svg){fig-align="center" width="100%"}
::::::

:::::: {.fragment fragment-index=2 .fade-in-then-out}
![](assets/latest/lightcone_0.svg){fig-align="center" width="100%"}
::::::

:::::: {.fragment fragment-index=3 .fade-in-then-out}
![](assets/latest/lightcone_1.svg){fig-align="center" width="100%"}
::::::

:::::: {.fragment fragment-index=4 .fade-in-then-out}
![](assets/latest/lightcone_2.svg){fig-align="center" width="100%"}
::::::

:::::: {.fragment fragment-index=5 .fade-in-then-out}
![](assets/latest/lightcone_3.svg){fig-align="center" width="100%"}
::::::

:::::

::::

:::: {.column width="40%"}

:::::: {.fragment fragment-index=2 .fade-in}
- We simulate the large-scale structure  
  forward in time and take snapshots at scale factor $a_i$
::::::

:::::: {.fragment fragment-index=3 .fade-in}
- A lightcone connects these simulations  
  to an observer at $a = 1$
::::::

:::::: {.fragment fragment-index=3 .fade-in}
- We slice the volume into 2D mass planes  
  across comoving distance bins
::::::

:::::: {.fragment fragment-index=4 .fade-in}
- Each redshift bin receives contributions  
  from the slabs in front of it
- Born approximation 
::::::

:::::: {.fragment fragment-index=5 .fade-in}

:::{.solutionbox}

::: {.solutionbox-header}
Born Approximation for Convergence
:::

:::: {.solutionbox-body style="font-size: 18px;"}

$$
\kappa(\boldsymbol{\theta}) = \int_0^{r_s} dr \, W(r, r_s) \, \delta(\boldsymbol{\theta}, r)
$$

Where the lensing weight is:

$$
W(r, r_s) = \frac{3}{2} \, \Omega_m \, \left( \frac{H_0}{c} \right)^2 \, \frac{r}{a(r)} \left(1 - \frac{r}{r_s} \right)
$$

::::

:::

::::::

::::

:::



---

## Can we start doing inference?


#### The impact of resolution on simulation accuracy


::: {layout-ncol=3}
![512^3 Resolution mesh](assets/Fields/LPT_density_field_z0_512.png){fig-align="center" width="75%"}

![256^3 Resolution mesh](assets/Fields/LPT_density_field_z0_256.png){fig-align="center" width="75%"}

![64^3 Resolution mesh](assets/Fields/LPT_density_field_z0_64.png){fig-align="center" width="75%"}

:::

:::: {.fragment fragment-index=1 .fade-in}

::: {layout-ncol=2}

![Power Spectrum Comparison](assets/latest/power_spectrum_comparison.png){fig-align="center" width="80%"}

![Biased Posterior Plot](assets/latest/biased_posterior_plot.png){fig-align="center" width="60%"}

:::

::::

<br/>

---

## Approximating the Small Scales {style="font-size: 19px;"}

::: {.columns}

:::: {.column width="50%"}
<br/>
<br/>


#### Dynamic resultion grid

-  &emsp;We can use a dynamic resolution that automatically refines the grid to match the density regaions blabla
-  &emsp; very difficult to differentialte and slow to compute

::::


:::: {.column width="50%"}

:::::: {.fragment fragment-index=1 .fade-in}

![Dynamic Resolution Grid](assets/latest/dynamic_grid.svg){fig-align="center" width="50%"}

::::::


::::

:::

::: {.columns}

:::: {.column width="50%"}

#### Multigrid Methods

-  &emsp;Multigrid solves the Poisson equation efficiently by combining coarse and fine grids
-  &emsp;It's still an approximation — it does **not match the accuracy** of solving on a uniformly fine grid
-  &emsp;At high fidelity, fine-grid solvers outperform multigrid in recovering small-scale structure — critical for unbiased inference

:::{.solutionbox}

::: {.solutionbox-header style="font-size: 19px;"}
 **Takeaway**  
:::

:::: {.solutionbox-body style="font-size: 18px;"}

For reliable inference, **uniform fine-resolution simulations** are still the gold standard — ensuring accurate gradients and unbiased posteriors.

::::

:::
::::




:::: {.column width="50%"}


::::: {.r-stack}

:::::: {.fragment fragment-index=2 .fade-in-then-out}

![Multigrid](assets/latest/multi_grid_0.svg){fig-align="center" width="70%"}

::::::

:::::: {.fragment fragment-index=3 .fade-in}

![Multigrid](assets/latest/multi_grid_1.svg){fig-align="center" width="70%"}

::::::

:::::



::::

:::


---

## Scaling Up: The LSST Challenge

::: {.columns}

:::: {.column width="50%"}

#### LSST Scan Range

-  Covers ~**18,000 deg²** (~44% of the sky)
-  Redshift reach: up to **z ≈ 3**
-  Arcminute-scale resolution
-  Requires simulations spanning thousands of Mpc in depth and width

::::

:::: {.column width="50%"}

![LSST Survey Footprint](assets/latest/lsst_footprint.png){fig-align="center" width="90%"}

::::

:::

- Simulating even a **(1 Gpc/h)³** subvolume at **1024³ mesh resolution** requires:
  - ~**48 GB** of memory for a simulation with a single snapshot
  - Gradient-based inference and multi-step evolution push that beyond **100–200 GB**


::: {.columns}

:::: {.column width="70%"}


:::{.solutionbox}

::: {.solutionbox-header style="font-size: 19px;"}
 **Takeaway**  
:::

:::: {.solutionbox-body style="font-size: 18px;"}

LSST-scale cosmological inference demands **multiple (Gpc/h)³ simulations** at high resolution.  
Modern high-end GPUs cap at **~80 GB**, so even a single box **requires multi-GPU distributed simulation** — both for memory and compute scalability.

::::

:::

::::

:::: {.column width="30%"}

![Jean Zay HPC - IDRIS](assets/HPC/jean_zay_photo.png){fig-align="center" width="90%"}

::::

:::


---

# Distributed Simulation with JAXPM


---


## Distributed Particle Mesh Simulation {style="font-size: 20px;"}


::: {.columns}

:::: {.column width="50%"}

::::: {.r-stack}

::::::: {.fragment fragment-index=1 .fade-in-then-out}
![Particle Mesh Simulation](assets/latest/PM_pipeline.svg){fig-align="center" width="100%"}
:::::::

::::::: {.fragment fragment-index=2 .fade-in-then-out}
![Particle Mesh Simulation](assets/latest/pm_laplace_kernel.svg){fig-align="center" width="100%"}
:::::::

::::::: {.fragment fragment-index=3 .fade-in}
![Particle Mesh Simulation](assets/latest/pm_fft.svg){fig-align="center" width="100%"}
:::::::

:::::

::::

:::: {.column width="50%"}

:::::: {.fragment fragment-index=2 .fade-in}

#### Force Computation is Easy to Parallelize

- Poisson’s equation in Fourier space:  
  $$
  \nabla^2 \phi = -4\pi G \rho
  $$

- Gravitational force in Fourier space:  
  $$
  \mathbf{f}(\mathbf{k}) = i\mathbf{k}k^{-2}\rho(\mathbf{k})
  $$

- Each Fourier mode $\mathbf{k}$ can be computed independently using JAX  
- Perfect for large-scale, parallel GPU execution

![](assets/Logos/JaxLogo.png){fig-align="center" width="20%"}

::::::

:::::: {.fragment fragment-index=4 .fade-in}

:::{.solutionbox}

:::: {.solutionbox-body style="font-size: 26px;"}
**Fourier Transform requires global communication**
::::

:::


::::::

::::

:::


---

## jaxDecomp: Distributed 3D FFT for Particle Mesh Simulations {style="font-size: 22px;"}

[![](https://img.shields.io/badge/GitHub-jaxdecomp-blue?logo=github)](https://github.com/DifferentiableUniverseInitiative/jaxDecomp)

:::{.fragment fragment-index=1}

- **Distributed 3D FFT** using **domain decomposition**  
- **Fully differentiable**, runs on **multi-GPU and multi-node** setups  
- Designed as a **drop-in replacement** for `jax.numpy.fft.fftn`  
- Open source and available on **PyPI**
:::

:::{.fragment fragment-index=2}

![](assets/jaxDecomp/fft.svg){fig-align="center" width="60%"}

:::


---


## Distributed Particle Mesh Simulation {style="font-size: 20px;"}

::: {.r-stack}

![Particle Mesh Simulation](assets/latest/pm_cic.svg){fig-align="center" width="60%"}

:::

---

## Cloud In Cell (CIC) Interpolation {style="font-size: 19px;"}

::: {layout-ncol=2}

:::: {.r-stack}

::::: {.fragment fragment-index=1 .fade-out}

![](assets/latest/particles_animation.gif){fig-align="center" width="80%"}

:::::

::::: {.fragment fragment-index=1 .fade-in}

![](assets/latest/particles_last_frame.png){fig-align="center" width="55%"}

:::::

::::

:::: {.r-stack}

::::: {.fragment fragment-index=1 .fade-out}

![](assets/latest/field_animation.gif){fig-align="center" width="80%"}

:::::

::::: {.fragment fragment-index=1 .fade-in}

![](assets/latest/field_last_frame.png){fig-align="center" width="55%"}

:::::

::::

:::


### Mass Assignment and Readout {style="font-size: 19px;"}

The Cloud-In-Cell (CIC) scheme spreads particle mass to nearby grid points using a linear kernel:

- **Paint to Grid** (mass deposition):
  $$
  g(\mathbf{j}) = \sum_i m_i \prod_{d=1}^{D} \left(1 - \left|p_i^d - j_d\right|\right)
  $$

- **Read from Grid** (force interpolation):
  $$
  v_i = \sum_{\mathbf{j}} g(\mathbf{j}) \prod_{d=1}^{D} \left(1 - \left|p_i^d - j_d\right|\right)
  $$


---

## Distributed Cloud In Cell (CIC) Interpolation {style="font-size: 20px;"}

::: {layout-ncol=3}

::::: {.fragment fragment-index=1 .fade-in}

![Sub Domain 1 (Particles)](assets/latest/D_CIC_Paint_0.svg){fig-align="center" width="65%"}

:::::

::::: {.fragment fragment-index=2 .fade-in}

![Sub Domain 1 (Grid)](assets/latest/D_CIC_Paint_1.svg){fig-align="center" width="65%"}

:::::

::::: {.fragment fragment-index=3 .fade-in}

![Sub Domain 1 (Read out)](assets/latest/D_CIC_Paint_2.svg){fig-align="center" width="65%"}

:::::

:::

:::::: {layout-ncol=3}

::::: {.fragment fragment-index=1 .fade-in}

![Sub Domain 1 & Halo (Particles)](assets/latest/D_CIC_Paint_3.svg){fig-align="center" width="65%"}

:::::

::::: {.fragment fragment-index=2 .fade-in}

![Sub Domain 1 & Halo (Grid)](assets/latest/D_CIC_Paint_4.svg){fig-align="center" width="65%"}

:::::

::::: {.fragment fragment-index=3 .fade-in}

![Sub Domain 2 & Halo (Grid)](assets/latest/D_CIC_Paint_5.svg){fig-align="center" width="65%"}

:::::

:::

